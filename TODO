********************************************************************************
*                               Current Tasks                                  *
********************************************************************************

REPLify QBasic
  max99x

Work on Ruby
  amasad

********************************************************************************
*                               Brainstorming                                  *
********************************************************************************

jqconsole changes
  Add line continuation support
    With markers!
  Fix paste on Opera
  Read the entire bash manual for inspiration
  Fix the scenario where the console is loosing focus when attempting to select text.
  Add a way to get the position of the cursor in the line (i.e. column).
    Used for tabstop-based tabbing on output.

Add a "library" property to the language definition
  Repl.coffee will always load and run it after initializing an engine
  A little extra overhead by makes things neater
  Better let the language keep track and load the library by itself
    No messing with the UI callbacks
    Can be optimized better
  I'd(amasad) rather have this controlled by $LAB and then delegated to the library
    I'm (max99x) not a fan of $LAB, but the way you did it looks fine
      Would still rather have plaintext libraries written in each language

Look into syntax highlighters
  Look into http://alexgorbatchev.com/SyntaxHighlighter/
    I (max99x) used this before; worked well
  Look into http://remiya.com/cms.php/7/freebies/jquery-codify.html
    Nothing impressive but it's built on top of http://qbnz.com/highlighter/
      A server-side highlighter that covers everything we need
      Maybe we could port some of those languages to Javascript
      Maybe just highlight the history using it

Would be nice to have one seedable random number generator for all languages
  Is needed as part of the standard library by some languages anyway
  Makes any state faking much easier

Examples
  How to load multi-command examples?
    As single command (with auto-growth for multi-lined examples)
    As a session?

Input method
  Line-by-line
    Natural terminal, from top to bottom
    Global hand-written key handler
    Grow automatically
      Shift+Enter
      Let language decide when to grow
        Scheme -> On unbalanced brackets/braces/parantheses
        QBasic -> On unfinished block
      On paste/example load?
      Need to always maintain continuation/indent marker, e.g.:
        >>> def f(x):
        ...   if x:
        ...     return x
        ...   else:
        ...     print 'Error!'
      How to keep history in multi-line
        Some terminals remember lines (e.g. Python)
        Others remember full commands (e.g. bash)
          I (max99x) would opt for this
  An expanded Rich-Text Editing for code snippets
    http://codemirror.net/
      Will open in a pop-up
        Pop-ups are so last decade!
      How to handle execution?
        Go through the terminal?
        Go to a different Eval method, for instance EvalMulti?
    What about highlighting?
      Codemirror is extensible - we can add languages that aren't supported

Persistence
  Download
    Session log
    All entered commands as script
  Persistence
    Snippet-like URLs
    Accounts / profiles
      Probably too complex and not really needed

UI Design
  jsREPL Logo
  Color scheme
  Something to fill in the empty space on first load
    Examples?
    FaUseLocalXHR: off)int logo?
    Something funny?
      Something funny yet subtle?
  Per-language help link

REPLify QBasic
  Keep state across commands
    Variables
      Just stack?
    User-defined types
    Subroutines/Functions
    Global settings (e.g. DEFINT)
    Anything else?
  Special case for DATA statements
  Add statement -> expression parse rule
    Make expression-only statements return result to caller
  Make VM call a function when errors are thrown during asynchronous execution

Port to Node.js
  Make it accessible from terminal

Exotic Future Features
  External Access
    DOM
    XHR
    Canvas
  Server side evaluation
    Security!
    Performance hit due to latency
  Parse tree
  Embed as executable script
    We have VMs for many languages with the same interface
    We can create a standard DOM/XHR/Canvas API accessible from all these languages
    A user can script their browser in any language on jsREPL
      Generate an includeable <script> for their page!
    Of course impractical for real projects, but some idiosyncratic fun!

Usage Patterns
  Trying out code while learning a language
  Linking to interactive solutions on sites like StackOverflow.com
  Access from mobile phones
  Prototyping
    Not complex enough so far

Marketing
  Target tutorial writers
  Post good answers with example links to jsREPL sessions
  Make a Chrome App
  Having a large collection of esoteric languages can attract amateurs (good!)

********************************************************************************
*                                  Cleanup                                     *
********************************************************************************

Scheme
  Docs: http://www.biwascheme.org/
  Built-in classes modification
    The Prototype library adds quite a few
  Globals
    BiwaScheme - acceptable
    All globals from the Prototype library

LISP
  Built-in classes modification
    None
  Globals
    Javathcript - acceptable

CoffeeScript
  Built-in classes modification
    ?
  Globals
    ?

Brainfuck
  Built-in classes modification
    ?
  Globals
    ?

QBasic
  Docs: http://stevehanov.ca/blog/index.php?id=92
  Built-in classes modification
    Array.accept
  Globals
    QBasic - acceptable

********************************************************************************
*                               More Languages                                 *
********************************************************************************

LISP
  http://kybernetikos.github.com/Javathcript/
    Currently used
  http://www.parkscomputing.com/lisptest.html
  http://joeganley.com/code/jslisp.html
  http://stevela.github.com/js-lisp/
  http://www.ducklet.com/jisp/
  http://www.marcbelmont.com/lisp-interpreter-in-javascript-with-jquery
  http://github.com/willurd/js-lisp
  https://github.com/akapav/js

Ruby
  http://coderepos.org/share/wiki/JSRuby
  http://hotruby.yukoba.jp/

Javascript

Haskell
  http://www.tinyrocket.se/2010/05/19/a-haskell-interpreter-in-javascript/
    Seems rather unstable
      Not sure if this can be used at all
      At best we'll need to patch up a fair amount of stuff
        An opportunity to properly learn Haskell!

Bloop
  http://tim-ryan.com/labs/bloopjs/

Befunge
  http://www.quirkster.com/js/befunge.html

Applesoft BASIC
  http://www.calormen.com/applesoft/

6502-compatible Assembler
  http://www.6502asm.com/

Cat
  http://www.cat-language.com/interpreter.html

Forth
  http://wiki.forthfreak.net/index.cgi?jsforth

HQ9+
  http://safalra.com/programming/esoteric-languages/interpreters/hq9-plus/

Prolog
  http://ioctl.org/logic/prolog-latest

Smalltalk
  http://silversmalltalk.wordpress.com/
  http://clamato.net/

Generic Algol-like languages
  http://www.zerny.dk/j-is-for-js.html

Python
  http://code.google.com/p/skulpt/

