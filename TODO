********************************************************************************
*                               Current Tasks                                  *
********************************************************************************

REPLify QBasic
  max99x
Make the random generator seedable (probably use a library)
  max99x

********************************************************************************
*                               Brainstorming                                  *
********************************************************************************

jqconsole changes
  Add line continuation support
    With markers!

Add a "library" property to the language definition
  Repl.coffee will always load and run it after initializing an engine
  A little extra overhead by makes things neater
  Better let the language keep track and load the library by itself
    No messing with the UI callbacks
    Can be optimized better
  I'd(amasad) rather have this controlled by $LAB and then delegated to the library
    I'm (max99x) not a fan of $LAB, but the way you did it looks fine
      Would still rather have plaintext libraries written in each language

Look into syntax highlighters
  Look into http://alexgorbatchev.com/SyntaxHighlighter/
    I (max99x) used this before; worked well
  Look into http://remiya.com/cms.php/7/freebies/jquery-codify.html
    Nothing impressive but it's built on top of http://qbnz.com/highlighter/
      A server-side highlighter that covers everything we need
      Maybe we could port some of those languages to Javascript
      Maybe just highlight the history using it


Would be nice to have one seedable random number generator for all languages
  Is needed as part of the standard library by some languages anyway
  Makes any state faking much easier

Examples
  How to load multi-command examples?
    As single command (with auto-growth for multi-lined examples)
    As a session?

Input method
  Line-by-line
    Natural terminal, from top to bottom
    Global hand-written key handler
    Grow automatically
      Shift+Enter
      Let language decide when to grow
        Scheme -> On unbalanced brackets/braces/parantheses
        QBasic -> On unfinished block
      On paste/example load?
      Need to always maintain continuation/indent marker, e.g.:
        >>> def f(x):
        ...   if x:
        ...     return x
        ...   else:
        ...     print 'Error!'
  An expanded Rich-Text Editing for code snippets
    Found this amazing solution! http://codemirror.net/
    Will open in a pop-up, and any execution done on it will either go through the 
    terminal or go to a different Eval method, for instance EvalMulti
    what about highlighting?

Persistence
  Download
    Session log
    All entered commands as script
  Persistence
    Snippet-like URLs
    Accounts / profiles
      Probably too complex and not really needed

UI Design
  jsREPL Logo
  Color scheme
  Something to fill in the empty space on first load
    Examples?
    FaUseLocalXHR: off)int logo?
    Something funny?
      Something funny yet subtle?
  Per-language help link

REPLify QBasic
  Keep state across commands
    Variables
      Just stack?
    User-defined types
    Subroutines/Functions
    Global settings (e.g. DEFINT)
    Anything else?
  Special case for DATA statements
  Add statement -> expression parse rule
    Make expression-only statements return result to caller
  Make VM call a function when errors are thrown during asynchronous execution

Port to Node.js
  Make it accessible from terminal

Exotic Future Features
  External Access
    DOM
    XHR
    Canvas
  Server side evaluation
    Security!
    Performance hit due to latency
  Parse tree

Usage Patterns
  Trying out code while learning a language
  Linking to interactive solutions on sites like StackOverflow.com
  Access from mobile phones
  Prototyping
    Not complex enough so far

Marketing
  Target tutorial writers
  Post good answers with example links to jsREPL sessions
  Make a Chrome App
  Having a collection of esotric languages will attracte lots of noobs

********************************************************************************
*                                  Cleanup                                     *
********************************************************************************

Could be handled really fast using an iframe sandbox, like with CoffeeScript
  1-More secure?
  2-Easier Cleanup
  3-Less control over script loading?

Scheme
  Docs: http://www.biwascheme.org/
  Built-in classes modification
    The Prototype library adds quite a few
  Globals
    BiwaScheme - acceptable
    All globals from the Prototype library

LISP
  Built-in classes modification
    ?
  Globals
    Javathcript
    JavathcriptTokenizer
    JavathcriptParser
    UnevaluatedObj
    Atom
    Util
    Assembler
    Assembly
    ....

QBasic
  Docs: http://stevehanov.ca/blog/index.php?id=92
  Built-in classes modification
    Array.accept
  Globals
    NextRuleId
    Rule
    RuleSet
    ---
    RuleParser
    ---
    NullType
    DeriveTypeNameFromVariable
    IntegerType
    SingleType
    DoubleType
    StringType
    AnyType
    ScalarVariable
    ArrayType
    UserType
    Dimension
    ArrayVariable
    IsNumericType
    IsStringType
    IsArrayType
    IsUserType
    IsNullType
    AreTypesCompatible
    ---
    StackFrame
    ---
    VirtualMachine
    SystemFunctions
    SystemSubroutines
    Instructions
    ---
    TypeScope
    CheckedLabel
    CheckedLoopContext
    TypeChecker
    ---
    NextId
    EarleyItem
    EarleyParser
    ---
    GlrItem
    GlrState
    GlrShiftNode
    GlrInteriorNode
    GlrReduceNode
    GlrParser
    ---
    NextStateId
    POST_NEWLINE
    PRE_NEWLINE
    DIGIT_CHAR
    ANY_CHAR
    Locus
    CharMatcher
    RangeMatcher
    NfaState
    DfaState
    NFA
    Token
    Tokenizer
    ---
    Instruction
    Label
    LoopContext
    CodeGenerator
    ---
    AstProgram
    AstArgument
    AstSubroutine
    AstDeclareFunction
    AstPrintUsingStatement
    AstPrintStatement
    AstPrintItem
    AstInputStatement
    AstNullStatement
    AstEndStatement
    AstNextStatement
    AstArrayDeref
    AstMemberDeref
    AstVariableReference
    AstRange
    AstDataStatement
    AstRestoreStatement
    AstDimStatement
    AstDefTypeStatement
    AstConstStatement
    AstDoStatement
    AstExitStatement
    AstWhileLoop
    AstForLoop
    AstIfStatement
    AstSelectStatement
    AstCaseStatement
    AstTypeMember
    AstUserType
    AstGotoStatement
    AstGosubStatement
    AstLabel
    AstCallStatement
    AstAssignStatement
    AstBinaryOp
    AstUnaryOperator
    AstConstantExpr
    AstReturnStatement
    onProgram
    onNumber
    onString
    onBinaryOp
    onParamListInBrackets
    onBracketExpr
    QBasicProgram

********************************************************************************
*                               More Languages                                 *
********************************************************************************

LISP
  http://kybernetikos.github.com/Javathcript/
    Currently used
  http://www.parkscomputing.com/lisptest.html
  http://joeganley.com/code/jslisp.html
  http://stevela.github.com/js-lisp/
  http://www.ducklet.com/jisp/
  http://www.marcbelmont.com/lisp-interpreter-in-javascript-with-jquery
  http://github.com/willurd/js-lisp

CoffeeScript
  http://jashkenas.github.com/coffee-script/

Ruby
  http://coderepos.org/share/wiki/JSRuby
  http://hotruby.yukoba.jp/

Bloop
  http://tim-ryan.com/labs/bloopjs/

Befunge
  http://www.quirkster.com/js/befunge.html

Brainfuck
  http://www.iamcal.com/misc/bf_debug/

Cat
  http://www.cat-language.com/interpreter.html

Forth
  http://wiki.forthfreak.net/index.cgi?jsforth

Haskell
  http://www.tinyrocket.se/2010/05/19/a-haskell-interpreter-in-javascript/
    Seems rather unstable
      Not sure if this can be used at all
      At best we'll need to patch up a fair amount of stuff
        An opportunity to properly learn Haskell!

HQ9+
  http://safalra.com/programming/esoteric-languages/interpreters/hq9-plus/

Javascript
  https://github.com/mozilla/narcissus
    Includes new experimental JS harmony features, e.g. refelection and proxies
    Check cross-browser compatibility - probably hard
    Easy sandboxing could be done in iframe
      Would it sandbox properly even if the iframe is on the same domain?
      How will we get the output?
      Security problems mainly with snippet sharing

Prolog
  http://ioctl.org/logic/prolog-latest

Applesoft BASIC
  http://www.calormen.com/applesoft/

6502-compatible Assembler
  http://www.6502asm.com/

Smalltalk
  http://silversmalltalk.wordpress.com/

Generic Algol-like languages
  http://www.zerny.dk/j-is-for-js.html

Python
  http://code.google.com/p/trypython/
    Running via IronPython/Silverlight
