Look into jQuery Terminal (which is what the BiwaScheme site uses)
  A bit too heavy for our needs, but we could hack out the stuff we need

Need some way to prevent infinite loops in the interpreters!
Need to prevent rich-text pasting into the prompt!

Would be nice to have one seedable random number generator for all languages
  Is needed as part of the standard library by some languages anyway
  Makes any state faking much easier

Examples
  Storing examples in JSON makes them super-ugly. Should find better way
  How to load multi-command examples?
    As a session?
    As an editable block of text into a large textbox?

Input method
  Line by line with history / state?
    Great for learning and quick experimenting
    Natural, same as all standard REPLs
    State can be faked by keeping a history of commands
      On output discarding old results
      Assuming determinism
  Single Textbox
    No need to keep state
    Harder to quickly experiment
    Easier for pasting existing code
  Both?
    Switching mechanism?
      Grow automatically?
        Shift+Enter
        Let language decide when to grow
          Scheme -> On unbalanced brackets/braces/parantheses
          QBasic -> On unfinished block
        On paste/example load?
        Is that enough?
        Need to always maintain continuation/indent marker, e.g.:
          >>> def f(x):
          ...   if x:
          ...     return x
          ...   else:
          ...     print 'Error!'


Persistence
  Download
    Session log
    All entered commands as script
  Persistence
    Snippet-like URLs
    Accounts / profiles
      Probably too complex and not really needed

Design
  jsREPL Logo
  Color scheme
  Something to fill in the empty space on first load
    Examples?
    Faint logo?
    Something funny?
      Something funny yet subtle?
  Per-language help link

REPLify QBasic
  Keep state across commands
    Variables
      Just stack?
    User-defined types
    Subroutines/Functions
    Global settings (e.g. DEFINT)
    Anything else?
  Special case for DATA statements
  Add statement -> expression parse rule
    Make expression-only statements return result to caller
  Make VM call a function when errors are thrown during asynchronous execution

Exotic Future Features
  External Access
    DOM
    XHR
    Canvas
  Sticky input
    Define a library-like bit of code to always load before anything else
      Per-command or per-session?
  Server side evaluation
    Security!
    Performance hit due to latency
  Parse tree

Usage Patterns / marketing
  Trying out code while learning a language
    We could "market" to tutorial writers
  Linking to interactive solutions on sites like StackOverflow.com
    Market by posting good answers with links to jsREPL
  Prototyping
    Not complex enough so far
  Anything else?

********************************************************************************
*                                  Cleanup                                     *
********************************************************************************

Scheme
  Docs: http://www.biwascheme.org/
  Built-in classes modification
    The Prototype library adds quite a few
  Globals
    BiwaScheme - acceptable
    All globals from the Prototype library


QBasic
  Docs: http://stevehanov.ca/blog/index.php?id=92
  Built-in classes modification
    Array.accept
  Globals
    NextRuleId
    Rule
    RuleSet
    ---
    RuleParser
    ---
    NullType
    DeriveTypeNameFromVariable
    IntegerType
    SingleType
    DoubleType
    StringType
    AnyType
    ScalarVariable
    ArrayType
    UserType
    Dimension
    ArrayVariable
    IsNumericType
    IsStringType
    IsArrayType
    IsUserType
    IsNullType
    AreTypesCompatible
    ---
    StackFrame
    ---
    VirtualMachine
    SystemFunctions
    SystemSubroutines
    Instructions
    ---
    TypeScope
    CheckedLabel
    CheckedLoopContext
    TypeChecker
    ---
    NextId
    EarleyItem
    EarleyParser
    ---
    GlrItem
    GlrState
    GlrShiftNode
    GlrInteriorNode
    GlrReduceNode
    GlrParser
    ---
    NextStateId
    POST_NEWLINE
    PRE_NEWLINE
    DIGIT_CHAR
    ANY_CHAR
    Locus
    CharMatcher
    RangeMatcher
    NfaState
    DfaState
    NFA
    Token
    Tokenizer
    ---
    Instruction
    Label
    LoopContext
    CodeGenerator
    ---
    AstProgram
    AstArgument
    AstSubroutine
    AstDeclareFunction
    AstPrintUsingStatement
    AstPrintStatement
    AstPrintItem
    AstInputStatement
    AstNullStatement
    AstEndStatement
    AstNextStatement
    AstArrayDeref
    AstMemberDeref
    AstVariableReference
    AstRange
    AstDataStatement
    AstRestoreStatement
    AstDimStatement
    AstDefTypeStatement
    AstConstStatement
    AstDoStatement
    AstExitStatement
    AstWhileLoop
    AstForLoop
    AstIfStatement
    AstSelectStatement
    AstCaseStatement
    AstTypeMember
    AstUserType
    AstGotoStatement
    AstGosubStatement
    AstLabel
    AstCallStatement
    AstAssignStatement
    AstBinaryOp
    AstUnaryOperator
    AstConstantExpr
    AstReturnStatement
    onProgram
    onNumber
    onString
    onBinaryOp
    onParamListInBrackets
    onBracketExpr
    QBasicProgram




********************************************************************************
*                               More Languages                                 *
********************************************************************************

LISP
  http://kybernetikos.github.com/Javathcript/
    Suboptimal?
  http://www.parkscomputing.com/lisptest.html
  http://joeganley.com/code/jslisp.html
  http://stevela.github.com/js-lisp/
  http://www.ducklet.com/jisp/
  http://www.marcbelmont.com/lisp-interpreter-in-javascript-with-jquery

CoffeeScript
  http://jashkenas.github.com/coffee-script/

Ruby
  http://coderepos.org/share/wiki/JSRuby
  http://hotruby.yukoba.jp/

Bloop
  http://tim-ryan.com/labs/bloopjs/

Befunge
  http://www.quirkster.com/js/befunge.html

Brainfuck
  http://www.iamcal.com/misc/bf_debug/

Cat
  http://www.cat-language.com/interpreter.html

Forth
  http://wiki.forthfreak.net/index.cgi?jsforth

Haskell
  http://www.tinyrocket.se/2010/05/19/a-haskell-interpreter-in-javascript/
    Seems rather unstable
      Not sure if this can be used at all
      At best we'll need to patch up a fair amount of stuff
        An opportunity to properly learn Haskell!

HQ9+
  http://safalra.com/programming/esoteric-languages/interpreters/hq9-plus/

Javascript
  https://github.com/mozilla/narcissus
    Includes new experimental JS harmony features, e.g. refelection and proxies
    Check cross-browser compatibility - probably hard
    Easy sandboxing could be done in iframe
      Would it sandbox properly even if the iframe is on the same domain?
      How will we get the output?

Prolog
  http://ioctl.org/logic/prolog-latest

Applesoft BASIC
  http://www.calormen.com/applesoft/

6502-compatible Assembler
  http://www.6502asm.com/

Smalltalk
  http://silversmalltalk.wordpress.com/

Generic Algol-like languages
  http://www.zerny.dk/j-is-for-js.html
