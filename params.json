{"name":"Jsrepl","body":"# JSREPL  \r\n  \r\nA sandboxed polyglot browser REPL.  \r\n  \r\n## Current Languages  \r\n  \r\n* JavaScript Variants\r\n  * JavaScript\r\n  * CoffeeScript\r\n  * Kaffeine\r\n  * Move\r\n  * Traceur (JavaScript.next)\r\n\r\n* Esoteric\r\n  * Bloop\r\n  * Brainfuck\r\n  * LOLCODE\r\n  * Unlambda\r\n  * Emoticon\r\n  \r\n* Classic\r\n  * Quick Basic\r\n  * Forth\r\n  \r\n* Serious\r\n  * Scheme\r\n  * Lua\r\n  * Python\r\n  * Ruby (beta)\r\n\r\n## Browser Support  \r\n* IE 9-10  \r\n* Chrome 10+  \r\n* Safari 5  \r\n* Firefox 3.6+  \r\n* Opera 11+  \r\n* iOS 5 Safari  \r\n  \r\n## Getting Started  \r\n  \r\nInclude the built jsrepl script with the id \"jsrepl-script\".  \r\n\r\n```html\r\n  <script src=\"jsrepl.js\" id=\"jsrepl-script\"></script>  \r\n```  \r\n  \r\n### Instantiating JSREPL  \r\n  \r\n```javascript\r\n  var jsrepl = new JSREPL({  \r\n    input: inputCallback,  \r\n    output: outputCallback,  \r\n    result: resultCallback,  \r\n    error: errorCallback,  \r\n    progress: progressCallback,  \r\n    timeout: {  \r\n      time: 30000,  \r\n      callback: timeoutCallback  \r\n    }  \r\n  });  \r\n```  \r\n  \r\n* `inputCallback`: A callback function that is called when the language interpreter    \r\nis requesting input from the user. It will be passed a continuation callback that    \r\nshould be called with the user input. Typically the interpreter would block until  \r\ninput is received hence this is a mandatory callback.  \r\n* `outputCallback`: An optional callback function that is called when the engine  \r\nhas output to flush out to the standard out.  \r\n* `resultCallback`: An optional callback function that is called when the interpreter  \r\nhas successfully evaluated a program and passed the resulting evaluated value.  \r\n* `errorCallback`: An optional callback function that is called if evaluatiing a  \r\nprogram yielded an error and passed the error.  \r\n* `progress`: An optional callback function that is called repeatedly while loading  \r\na language interpreter with the progress percentage.  \r\n* `timeout`: Sets a timeout for running a program.  \r\n  * `time`: Milliseconds to wait.  \r\n  * `callback`: The callback function that is called when a program times out. This  \r\n  callback must handle recovering the system (i.e. call jsrepl.loadLanguage etc.).  \r\n  Must return `true` to stop the timeout from firing again.  \r\n  \r\n## API\r\n\r\n### JSREPL::loadLanguage  \r\nLoads a language interpreter. Takes three arguments:  \r\n  \r\n  * __string__ *lang_name*: The name of the language to load.  \r\n  * __function__ *callback*: Called when the language has been successfully loaded.  \r\n  * __boolean__ *worker_friendly* (optional): By default JSRPEL would try to load  \r\n  interpreters into Web Workers, this argument would force either loading in a   \r\n  Worker (true) or loading in an iframe (false).  \r\n  \r\nExample:\r\n\r\n```javascript\r\n  jsrepl.loadLanguage('python', function () {  \r\n    alert('Python loaded');  \r\n  });\r\n```\r\n  \r\n### JSRPEL::eval  \r\nEvaluates a program in the currently loaded language interpreter. Takes one argument:  \r\n  \r\n  * __string__ *command*: The program string to evaluate.  \r\n  \r\nExample:\r\n\r\n```javascript\r\n  jsrepl.eval('1+1');  \r\n```\r\n  \r\n### JSREPL::getLangConfig  \r\nReturns the configuration object for a given language. Takes one argument:  \r\n  \r\n  * __string__ *lang_name*: The language whose config will be returned. Defaults  \r\n  to the current language name.  \r\n  \r\n### JSREPL::checkLineEnd  \r\nGiven a command, decides whether it is ready for execution, as opposed to being  \r\nunfinished, such as missing a closing brace.\r\n  \r\n  * __string__ *command*: The program string.  \r\n  * __function__ *callback*: The callback will be called with true if the command  \r\n  is ready for execution, or false if it is incomplete.\r\n  \r\n### JSREPL::on  \r\nAttaches a listener to one or more events. Takes two arguments:  \r\n  \r\n  * __string | array__ *event_type*: Event(s) to listen to.  \r\n  * __function__ *callback*: The function to call when the event is fired. Will    \r\n  be called with whatever arguments the event supplies.  \r\n  \r\n### JSREPL::off  \r\nDetaches a listener or all listeners to one or more events. Arguments:    \r\n  \r\n  * __string | array__ *event_type*: Event(s) to detach listener(s) from.\r\n  * __function__ *listener*: The listener function to detach. If not supplied then    \r\n  all listeners will be detached.  \r\n    \r\n### JSREPL::once\r\nAttaches a listener to one or more events that will only be called once.\r\nArguments:\r\n\r\n  * __string | array__ *event_type*: Event(s) to listen to.  \r\n  * __function__ *callback*: The function to call when the event is fired.  \r\n\r\n## Events\r\n\r\n### input  \r\nFired when the current language interpreter asks for input.    \r\nArguments:  \r\n  \r\n  * __function__ *callback*: The program execution continuation callback.    \r\n  Must be called with the string from the user input. Note that only    \r\n  one input listener should call this callback.  \r\n  \r\n  \r\n### output  \r\nFired each time the current language interpreter has output to standard out.    \r\nArguments:  \r\n    \r\n  * __string__ *data*: The output string.  \r\n    \r\n### result  \r\nFired when the language interpreter has a result from the latest eval.    \r\nArguments:  \r\n  \r\n  * __string__ *data*: The *stringified* result from the latest eval.  \r\n    \r\n### error  \r\nFired when the language interpreter has an error from the latest eval.    \r\nArguments:  \r\n  \r\n  * __string__ *error*: The *stringified* error from the latest eval.  \r\n  \r\n### progress  \r\nFired when JSREPL has load progress percentage from loading a language  \r\ninterpreter to report.  \r\nArguments:    \r\n  \r\n  * __float__ *percentage*: How much of the interpreter file(s) was loaded.  \r\n  \r\n### timeout  \r\nIf JSREPL was instantiated with the `timeout` option that includes the time  \r\nto wait on a running program before calling the specified callback (see  \r\nInstantiating JSREPL) and firing this event.  \r\n\r\n### ready\r\nFired when a language is loaded and is ready to eval.\r\n\r\n## Standard input hacks\r\n\r\n### Problem\r\nLanguage interpreters that are compiled with Emscripten expect input to be  \r\nto be a blocking call (synchronous). The only way to get blocking input  \r\nprompts in browsers is by using `window.prompt`. While suboptimal, it  \r\nworks. However, that way we lose the ability to load interpreters in Web  \r\nWorkers (because Workers have no access to dialog boxes). \r\n\r\nLoading interpreters in workers has many benefits including not blocking  \r\nthe main UI thread while the interpreter is intializing or working and the  \r\nability to catch infinite loops (see timeout event). Despite these  \r\nadvantages, until recently we avoided Workers in order to support input,  \r\nso we loaded languages which expect blocking input calls in an iframe  \r\ninstead of a web worker. However in recent builds of Firefox and Chrome  \r\nthat approach was broken for us because we could no longer do synchronous  \r\nbinary XHRs, e.g. to read library files.\r\n\r\n### Solution\r\n\r\n#### Webkit browsers\r\nIn WebKit-based browsers, we have leveraged the non-standard Web SQL Database  \r\nto share resources between the main thread and the worker thread, as they  \r\nprovide a synchronization mechanism that can be accessed from both the main  \r\npage thread and from a worker. (See repl.coffee and sandbox.js).\r\n\r\n#### Firefox\r\nUnfortunately we couldn't do the same in Firefox, as it does not implement Web  \r\nSQL, and still does not support the standard IndexedDB Sync API. Instead, we  \r\nhave used XHR to synchronously communicate between the worker and the main  \r\nthread using our server as a crude proxy. There is a sample server  \r\nimplementation in the [repl.it static server](https://github.com/replit/repl.it/blob/master/server.js#L31-69).\r\n\r\n## License  \r\n  \r\njsREPL is available under the MIT license. Language interpreters and the   \r\nmodifications done to them by jsREPL developers have their own licenses, found  \r\nin their `extern/{language}` folders or submodules.  ","tagline":"Multilingual sandboxed REPL engine in JavaScript.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}